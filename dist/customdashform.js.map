{"version":3,"sources":["webpack:///webpack/bootstrap 9f91808fabb51f9dc141","webpack:///./src/customdashform.js","webpack:///./src/elements/CustomForm/index.js","webpack:///./src/elements/CustomFormControl/index.js"],"names":["_hasErrors","_customControls","Map","_isInitialized","window","requestAnimationFrame","_init","_form","querySelector","setAttribute","addEventListener","_blurHandler","_submitHandler","_onregisterCustomControl","bind","disconnectedCallback","removeEventListener","event","set","target","_field","_setCustomForm","stopPropagation","field","validityType","getProp","propname","minLength","maxLength","charLength","length","numMax","numMin","messages","valueMissing","typeMismatchEmail","typeMismatchUrl","tooShort","tooLong","patternMismatch","badInput","stepMismatch","rangeOverflow","rangeUnderflow","generic","_getCustomMessage","customMessage","key","type","toUpperCase","slice","hasAttribute","getAttribute","validationMessage","form","fields","id","closest","error","name","message","document","createElement","className","_errorClass","label","_getFieldLabel","parentElement","insertBefore","nextElementSibling","classList","add","_labelErrorClass","innerHTML","style","display","visibility","_showError","_fieldErrorClass","group","getElementsByName","forEach","item","_revealErrorMessage","_createErrorMessage","_removeError","removeAttribute","remove","Array","from","disabled","_ignoredTypes","indexOf","submitBtn","_submissionButton","_shouldNotValidate","validity","_validity","valid","validityTypes","_validityTypes","_determineMessage","has","get","_hasError","_submittedWithFormnovalidate","_fields","push","_disableSubmit","preventDefault","focus","_onSubmit","elements","map","activeElement","HTMLElement","_registerAsCustomControl","attrName","toLowerCase","_customForm","CustomEvent","bubbles","dispatchEvent","element"],"mappings":"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","file":"./dist/customdashform.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 120);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9f91808fabb51f9dc141","import CustomForm from './elements/CustomForm';\nimport CustomFormControl from './elements/CustomFormControl';\n\n\n// WEBPACK FOOTER //\n// ./src/customdashform.js","\n\nexport default class extends HTMLElement {\n  /**\n   * Custom element reaction when element is connected to the DOM.\n   */\n  connectedCallback() {\n    // Track errors, initialize as an empty Array.\n    this._hasErrors = [];\n    // Set the custom controls ”registry” to be a map, so that\n    // we can use the actual HTML form field as key, and the custom field \n    // as value - this allows us to determine easily if a form field belongs\n    // to a custom control when validating fields. \n    this._customControls = new Map();\n\n    // Only initialize DOM stuff once.\n    if (!this._isInitialized) {\n      window.requestAnimationFrame(() => this._init());\n    }\n  }\n\n  /**\n   * Initialize the custom element, if the form exists. Otherwise, try again\n   * later.\n   */\n  _init() {\n    // Grab the form (the first one, and only _one_.)\n    this._form = this.querySelector('form');\n    \n    // If there isn't a form, reinitialize again after a tick.\n    if (!this._form) {\n      window.requestAnimationFrame(() => this._init());\n      return;\n    }\n\n    // If there is a form, we can set the flag and move on.\n    this._isInitialized = true;\n\n    // Set the `novalidate` attr so that native form validation messages\n    // are disabled.\n    this._form.setAttribute('novalidate', '');\n\n    // When a field is blurred, handle validation.\n    this.addEventListener('blur', this._blurHandler, true);\n\n    // When the form is submitted, handle full validation\n    this.addEventListener('submit', this._submitHandler, false);\n\n    // Listen for custom element children registering as custom controls.\n    this.addEventListener('customdashform:registercontrol',\n      this._onregisterCustomControl.bind(this), false);\n  }\n\n  /**\n   * Shortcut to programmatically disconnect, if needed.\n   */\n  _destroy() {\n    this.disconnectedCallback();\n  }\n\n  /**\n   * Custom element reaction for when the element is disconnected from the DOM.\n   */\n  disconnectedCallback() {\n    this.removeEventListener('blur', this._blurHandler, true);\n    this.addEventListener('submit', this._submitHandler, false);\n  }\n\n  /**\n   * Getter for a list of fields/form controls.\n   * These can be either straight up HTML form fields OR\n   * custom controls.\n   * @return {Array} - A list of fields, custom or native.\n   */\n  get _fields() {\n    return Array.from(this._form.elements).map((field)=> {\n      if (this._customControls.has(field)) {\n        return this._customControls.get(field);\n      } else {\n        return field;\n      }\n    });\n  }\n  /**\n   * Determines if the submit event of the <form> should be prevented after\n   * processing validation.\n   * @return {Boolean}\n   */\n  get _disableSubmit() {\n    return false;\n  }\n\n  /**\n   * List of validityTypes, as defined in the HTML5 standard.\n   * @return {Array} - The list of strings of validity types.\n   */\n  get _validityTypes() {\n    return [\n      \"valueMissing\",\n      \"typeMismatch\",\n      \"tooShort\",\n      \"tooLong\",\n      \"patternMismatch\",\n      \"badInput\",\n      \"stepMismatch\",\n      \"rangeOverflow\",\n      \"rangeUnderflow\",\n    ]\n  }\n  /**\n   * Some input types should be ignored by default.\n   * @return {array} - Array of ignored input types.\n   */\n  get _ignoredTypes() {\n    return ['field', 'submit', 'button', 'reset'];\n  }\n  /**\n   * Class name for error messages.\n   * @return {String} - class name.\n   */\n  get _errorClass() {\n    return 'error-message';\n  }\n  /**\n   * Class name for fields in invalid state.\n   * @return {String} - class name\n   */\n  get _fieldErrorClass() {\n    return 'error';\n  }\n  /**\n   * Class name for labels associated with fields in error state.\n   * @return {String} - class name.\n   */\n  get _labelErrorClass() {\n    return `${this._fieldErrorClass}-label`;\n  }\n\n  /**\n   * Handler for when custom child controls send and event for registering as\n   * part of the form.\n   * @param  {Event} event - the custom event triggered.\n   */\n  _onregisterCustomControl(event) {\n    // Set the field as the key in the custom controls map, with the field as value.\n    this._customControls.set(event.target._field, event.target);\n    // Tell the custom control which form it now belongs to:\n    event.target._setCustomForm(this);\n    // Stop the event from bubbling further.\n    event.stopPropagation();\n  }\n\n  /**\n   * Figures out what the error message is for a particular form control.\n   * @param  {Element} field - the HTML native form field or custom form control.\n   * @param  {String} validityType - the validityType string, usually from native API.\n   * @return {String} - the error message\n   */\n  _determineMessage(field, validityType) {\n    function getProp(field, propname) {\n      if (propname in field) {\n        return field[propname];\n      }\n      if (field._field) {\n        return field._field[propname];\n      }\n    }\n    var minLength = getProp(field, 'minLength');\n    var maxLength = getProp(field, 'maxLength');\n    var charLength = getProp(field, 'value').length;\n    var numMax = getProp(field, 'max');\n    var numMin = getProp(field, 'min');\n    var messages = {\n      // Messages\n      valueMissing: 'Please fill out this field.',\n      typeMismatchEmail: 'Please enter an email address.',\n      typeMismatchUrl: 'Please enter a URL.',\n      tooShort: `Please lengthen this text to ${minLength} characters or more. You are currently using ${charLength} characters.`,\n      tooLong: `Please shorten this text to no more than ${maxLength} characters. You are currently using ${charLength} characters.`,\n      patternMismatch: 'Please match the requested format.',\n      badInput: 'Please enter a number.',\n      stepMismatch: 'Please select a valid value.',\n      rangeOverflow: `Please select a value that is no more than ${numMax}.`,\n      rangeUnderflow: `Please select a value that is no less than ${numMin}.`,\n      generic: 'The value you entered for this field is invalid.',\n    }\n    // If this is a custom field implementing the _getCustomMessage method,\n    // and that method returns something, let that be the error message.\n    if (typeof field._getCustomMessage == 'function') {\n      let customMessage = field._getCustomMessage(validityType);\n      if (customMessage) {\n        return customMessage;\n      }\n    }\n    // Differentiate type mismatch messages\n    if (validityType === 'typeMismatch') {\n      let key = `${validityType}${field.type[0].toUpperCase()}${field.type.slice(1)}`\n      return messages[key];\n    }\n    // The patternMismatch type allows for a custom message to be specified \n    // using the title attribute on the input itself.\n    if (validityType === 'patternMismatch' && field.hasAttribute('title')) {\n      return field.getAttribute('title');\n    }\n    return field.validationMessage || messages[validityType];\n  }\n  /**\n   * Placeholder callback after successful validation, to override\n   * when extending.\n   * @param  {Element} form - The <form> itself.\n   * @param  {Array} fields - An array of fields.\n   */\n  _onSubmit(form, fields) {\n\n  }\n\n  /**\n   * Gets the <label> element of a native form field.\n   * @param  {Element} field - the native HTML form field\n   * @return {(Element|null)} - The <label> element of the element, or null if none exists.\n   */\n  _getFieldLabel(field) {\n    return this.querySelector(`label[for=\"${field.id}\"]`) || field.closest('label');\n  }\n\n\n  /**\n   * Creates an error element based on the field and message.\n   * @param  {Element} field - The html form field\n   * @param  {string} error - The error message\n   * @return {Element} - The constructed error message element.\n   */\n  _createErrorMessage(field, error) {\n    // Get field id or name\n    let id = field.id || field.name;\n    if (!id) {\n      return;\n    }\n\n    // Check if error message field already exists\n    // If not, create one\n    let message = this.querySelector(`#error-for-${id}`);\n    if (!message) {\n      message = document.createElement('div');\n      message.className = this._errorClass;\n      message.id = 'error-for-' + id;\n\n      // If the field is a radio button or checkbox, insert error after the label\n      let label = this._getFieldLabel(field);\n      if (label && (field.type === 'radio' || field.type ==='checkbox')) {\n        label.parentElement.insertBefore( message, label.nextElementSibling );\n      } else {\n        field.parentElement.insertBefore( message, field.nextElementSibling );\n      }\n      if (label) {\n        label.classList.add(this._labelErrorClass);\n      }\n    }\n\n    // Add ARIA role to the field\n    field.setAttribute('aria-describedby', 'error-for-' + id);\n\n    // Update error message\n    message.innerHTML = error;\n\n    return message;\n  }\n  /**\n   * Reveal the error message, i.e. making it (re-)render in the DOM.\n   * @param  {Element} message - The error message DOM element.\n   */\n  _revealErrorMessage(message) {\n    message.style.display = 'block';\n    message.style.visibility = 'visible';\n  }\n  /**\n   * Initiate the chain of events that end up showing a certain error message.\n   * @param  {Element} field - The HTML form field that the error pertains to.\n   * @param  {String} error - The error message\n   */\n  _showError(field, error) {\n    // If this is a custom field, delegate to the custom method.\n    if (typeof field._showError === 'function') {\n      field._showError(error);\n      return;\n    }\n\n    // Add error class to field\n    field.classList.add(this._fieldErrorClass);\n\n    // If the field is a radio button and part of a group, error all and get the last item in the group\n    if (field.type === 'radio' && field.name) {\n      var group = document.getElementsByName(field.name);\n      group.forEach((item) => {\n        if (item.form !== this._form) {\n          return; // Only check fields in current form\n        }\n        item.classList.add(this._fieldErrorClass);\n      });\n    }\n    this._revealErrorMessage(this._createErrorMessage(field, error));\n  }\n\n  /**\n   * Remove all traces of the error message / state from a field.\n   * @param  {Element} field - The HTML form field in question.\n   */\n  _removeError(field) {\n    // If this is a custom field, delegate to the custom method.\n    if (typeof field._removeError === 'function') {\n      field._removeError(field);\n      return;\n    }\n\n    // Remove ARIA role from the field\n    field.removeAttribute('aria-describedby');\n\n    // Remove error class to field\n    field.classList.remove(this._fieldErrorClass);\n\n    let label = this._getFieldLabel(field);\n    if (label) {\n      label.classList.remove(this._labelErrorClass);\n    }\n\n    // If the field is a radio button and part of a group, remove error from all and get the last item in the group\n    if (field.type === 'radio' && field.name) {\n      var group = Array.from(document.getElementsByName(field.name));\n      group.forEach((item) => {\n        if (item.form !== this._form) {\n          return; // Only check fields in current form\n        }\n        item.classList.remove(this._fieldErrorClass);\n      });\n    }\n\n    // Get field id or name\n    var id = field.id || field.name;\n    if (!id) {\n      return;\n    }\n\n    // Check if an error message is in the DOM\n    var message = this.querySelector(`.${this._errorClass}#error-for-${id}`);\n    if (!message) {\n      return;\n    }\n\n    // If so, hide it\n    message.innerHTML = '';\n    message.style.display = 'none';\n    message.style.visibility = 'hidden';\n  }\n\n  /** \n   * Some types of fields should be ignored in terms of validity:\n   * 1. Disabled form controls\n   * 2. Descendants of disabled fieldsets\n   * 3. Particular field types\n   */ \n  _shouldNotValidate(field) {\n    \n    if (field.disabled || // 1\n        field.closest('fieldset[disabled]') || // 2\n        this._ignoredTypes.indexOf(field.type) > -1 // 3\n        ) {\n      return true;\n    }\n  }\n\n  /**\n   * Getter for the active button, after a submission is made.\n   * @return {(Element|null)} - The element, or null if missing.\n   */\n  get _submissionButton() {\n    let activeElement = document.activeElement;\n    if (activeElement && activeElement.form === this._form) {\n      return activeElement;\n    }\n    return null;\n  }\n\n  /**\n   * Check if the form was submitted by a button with `formnovalidate` set.\n   * @returns { boolean } - If the submit field had formnovalidate set.\n   */\n  _submittedWithFormnovalidate() {\n    let submitBtn = this._submissionButton;\n    if (submitBtn && submitBtn.hasAttribute('formnovalidate')) {\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Validates a field and returns its error message if invalid.\n   * @param  {Element}  field - the html form field or custom control element.\n   * @return {(String|void)} - String if invalid, void else.\n   */\n  _hasError(field) {\n    // Check if this field should be excluded from validation.\n    if (this._shouldNotValidate(field)) {\n      return;\n    }\n    // cache a reference to validityState (or custom getter thereof).\n    let validity = field.validity || field._validity;\n\n    // field is valid, return:\n    if (validity.valid) {\n      return;\n    }\n    let validityTypes = this._validityTypes;\n    if (field._validityTypes && field._validityTypes.length > 0) {\n      validityTypes = field._validityTypes;\n    }\n\n    for (var type of validityTypes) {\n      if (validity[type] === true) {\n        return this._determineMessage(field, type);\n      }\n    }\n\n    return this._determineMessage(field, 'generic');\n  }\n\n  /**\n   * Event handler for when a field is blurred. Validates the field in isolation.\n   * @param  {Event} event - the event object\n   */\n  _blurHandler(event) {\n    // By default, field is the blur target element.\n    var field = event.target;\n\n    // Check the custom controls map, replace field var with custom element out if so.\n    if (this._customControls.has(field)) {\n      field = this._customControls.get(field);\n    }\n\n    // Validate the field\n    var error = this._hasError(field);\n\n    // If there's an error, show it\n    if (error) {\n      this._showError(field, error);\n      return;\n    }\n\n    // Otherwise, remove any errors that exist\n    this._removeError(field);\n  }\n\n  /**\n   * Listen to the submit event of the HTMLFormElement inside the custom form\n   * validate all fields at that time, focus the first invalid field\n   * @param  {Event} event - The submit event object.\n   */\n  _submitHandler(event) {\n    if (this._submittedWithFormnovalidate()) {\n      return;\n    }\n    this._hasErrors = [];\n    this._fields.forEach((field) => {\n      var error = this._hasError(field);\n      if (error) {\n        this._showError(field, error);\n        this._hasErrors.push(field);\n      }\n    });\n    // Prevent form from submitting if there are errors or submission is disabled\n    if (this._hasErrors || this._disableSubmit) {\n      event.preventDefault();\n    }\n    // If there are errors, focus on first element with error\n    if (this._hasErrors.length > 0) {\n      let focus = ('focus' in this._hasErrors[0])? 'focus': '_focus';\n      this._hasErrors[0][focus]();\n      return;\n    }\n    this._onSubmit(this._form, this._fields);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/elements/CustomForm/index.js","/**\n * This is a base for custom form controls, meaning custom elements wrapping\n * an HTML form field or some other similar custom construction that can \n * be validated.\n *\n * It is expected that custom elements derived from this will have a parent \n * element based on the CustomForm class, wrapping a normal <form>.\n *\n * By default, custom form controls can have attributes mapping to text for\n * custom validation messages, as DOM attributes on the custom\n * element itself. The names of these are lowercase variants of the standardized\n * validity types (valueMissing, patternMismatch etc).\n *\n * Example for when the required attribute is used (mapping to `valueMissing`): \n * ```\n * <custom-control valuemissing=\"You must fill in this value, mate.\">\n *   <input required>\n * </custom-control>\n * ```\n * This file does not define a custom element name: you must do that yourself.\n *\n * If you need different functionality, you can extend this class and \n * override any methods you like. For example, if you’d like to wholesale translate\n * error messages, you can override the method for getting the custom error message\n * which then looks up the validityType in an object.\n *\n * Another example is if you build a wholly custom validation, which should then\n * override the _getValidity method (and other methods you need to override.)\n *\n * By default, the _getValidity method just delegates to the native validation,\n * via the parent CustomForm.\n */\n\nexport default class extends HTMLElement {\n  connectedCallback() {\n    // Since we do not know if required child elements\n    // are present when the element is upgraded \n    // (see e.g https://github.com/w3c/webcomponents/issues/551),\n    // run an initialization loop until all is well.\n    if (!this._isInitialized) {\n      window.requestAnimationFrame(() => this._init());\n    }\n  }\n\n  _init() {\n    if (!this._field) {\n      // DOM not ready: try again.\n      window.requestAnimationFrame(() => this._init());\n      return;\n    }\n    this._registerAsCustomControl();\n    this._isInitialized = true;\n  }\n  /**\n   * Getter for the field validity of the field inside this control wrapper.\n   * @return {Object} Validity Object\n   */\n  get _validity() {\n    return this._field.validity;\n  }\n  /**\n   * Getter for the HTML form field inside this control wrapper. You will need\n   * to override this if you create a custom form control for types of controls\n   * having multiple elements in a group, e.g. checkboxes and radio buttons.\n   * @return {Element} Input, Select or Textarea.\n   */\n  get _field() {\n    return this.querySelector('input, select, textarea') || null;\n  }\n  /**\n   * Getter for the plain HTML <form> of the field.\n   * @return {Element} HTMLFormElement\n   */\n  get _form() {\n    return this._field.form;\n  }\n  /**\n   * Getter for validityTypes custom to this field - default is false.\n   * Override this to have fields with their own validity types.\n   * @return {Arrau} An array of validityType strings.\n   */\n  get _validityTypes() {\n    return [];\n  }\n  /**\n   * Get a custom validation message for this form control. This implementation\n   * takes the validityType string, lowercases it and checks the custom element\n   * wrapper for an attribute of the same name, e.g `patternMismatch` becomes\n   * `patternmismatch`. If such an attribute exists, return the text inside.\n   * \n   * @param  {String} validityType The validityType key as string.\n   * @return {String}              The validation message, or empty string.\n   */\n  _getCustomMessage(validityType) {\n    let attrName = validityType.toLowerCase();\n    if (this.hasAttribute(attrName)) {\n      return this.getAttribute(attrName);\n    }\n    return '';\n  }\n  /**\n   * Show the error rendering of this custom field. This is a default\n   * implementation, which delegates back up to the parent CustomForm, if\n   * on exists - if the custom field uses a different logic, it needs to \n   * be extended.\n   * @param  {Element} field The field whose error is to be removed.\n   * @return {void}\n   */\n  _showError(error) {\n    if (this._customForm) {\n      this._customForm._showError(this._field, error);\n    }\n  }\n  /**\n   * Remove the error rendering of this custom field. This is a default\n   * implementation, which delegates back up to the parent CustomForm, if\n   * on exists - if the custom field uses a different logic, it needs to \n   * be extended.\n   * @param  {Element} field The field whose error is to be removed.\n   * @return {void}\n   */\n  _removeError(field) {\n    if (this._customForm) {\n      this._customForm._removeError(this._field, field);\n    }\n  }\n  /**\n   * Focus the field programmatically.\n   */\n  _focus() {\n    this._field.focus();\n  }\n  /**\n   * Use a custom Event to signal a parent CustomForm that there is a\n   * new form control.\n   * @return {void}\n   */\n  _registerAsCustomControl() {\n    // Create a custom DOM event, allow it to bubble.\n    let event = new CustomEvent('customdashform:registercontrol', {\n      bubbles: true\n    });\n    // Dispatch the event on the custom element wrapper:\n    this.dispatchEvent(event);\n  }\n  /**\n   * This method allows a parent CustomForm to \"register\" with the\n   * child CustomFormControl, creating an easier lookup.\n   * @param {Element} element An instance of CustomForm element \n   *                          (or extended versions thereof.)\n   */\n  _setCustomForm(element) {\n    this._customForm = element;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/elements/CustomFormControl/index.js"],"sourceRoot":""}